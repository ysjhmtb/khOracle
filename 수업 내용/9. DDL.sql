--부서의 평균급여보다 많은 급여를 받는 직원 정보 출력
SELECT E1.EMP_NAME, E1.DEPT_CODE, E1.SALARY
FROM EMPLOYEE E1
WHERE E1.SALARY > (SELECT AVG(E2.SALARY)
                                    FROM EMPLOYEE E2
                                    WHERE E2.DEPT_CODE = E1.DEPT_CODE)
ORDER BY DEPT_CODE;

SELECT DEPT_CODE, TRUNC(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE;


--DDL : 데이터 정의어 
--DB 사용하는 객체들의 정보를 만들고(CREATE), 변경하고(ALTER),
--                                     삭제한다(DROP).
--오라클에서 사용하는 객체 : USER, TABLE, SEQUENCE, FUNCTION
--                                    ,SYNONYM, VIEW, ROLE, TRIGGER,
--                                    ,PROCEDURE

--테이블 만들기
--CREATE TABLE 테이블명(
--  컬럼명 데이터타입 제약조건,
--  컬럼명 데이터타입
--);

--MEMBER 테이블(아이디, 이름, 비밀번호, 생년월일)
CREATE TABLE MEMBER(
    MEMBER_ID VARCHAR2(20),
    MEMBER_NAME VARCHAR2(30),
    MEMBER_PWD VARCHAR2(20),
    MEMBER_BIRTH CHAR(8)
);
--회원 이름, 회원 비밀번호, 생년월일
COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원 이름';
COMMENT ON COLUMN MEMBER.MEMBER_PWD IS '회원 비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_BIRTH IS '생년월일';
COMMENT ON TABLE MEMBER IS '회원정보';

SELECT *
FROM MEMBER;

SELECT TABLE_NAME
FROM USER_TABLES;

SELECT *
FROM USER_TAB_COLS
WHERE TABLE_NAME = 'MEMBER';

DESC MEMBER;


--제약조건(CONSTRAINTS)
--테이블의 컬럼 내 값의 입력을 제한하기 위해 설정하는 값
--테이블을 만들때 컬럼에 제약조건을 설정한다.
--NOT NULL, UNIQUE, PRIMARY KEY, FORIEGN KEY, CHECK
--C, U, P, R
--아래와 같은 테이블 생성
--테이블 명 : TABLE_USER_NOCONS 
--컬럼 : USER_NO - NUMBER, 
--         USER_ID - VARCHAR2(20),
--         USER_PWD - VARCHAR2(30),
--         USER_NAME - VARCHAR2(15),
--         GENDER - VARCHAR2(3),
--         PHONE - VARCHAR2(15),
--         EMAIL - VARCHAR2(30)
CREATE TABLE TABLE_USER_NOCONS(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30)
);

INSERT INTO TABLE_USER_NOCONS 
    VALUES (1, 'beomsuk', 'beomsuk', '최범석', '남', '010-3242-3277','choibeomsuk@naver.com');
INSERT INTO TABLE_USER_NOCONS
    VALUES (2, NULL, NULL, '김범석', '여', '010-123-4567', NULL);

SELECT *
FROM TABLE_USER_NOCONS;

CREATE TABLE TABLE_USER_NN(
    USER_NO NUMBER NOT NULL,
    USER_ID VARCHAR2(20) NOT NULL,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(15) NOT NULL,
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30)
);

INSERT INTO TABLE_USER_NN 
    VALUES (1, 'beomsuk', 'beomsuk', '최범석', '남', '010-3242-3277','choibeomsuk@naver.com');
INSERT INTO TABLE_USER_NN
    VALUES (2, NULL, NULL, '김범석', '여', '010-123-4567', NULL);

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TABLE_USER_NN';

SELECT *
FROM USER_CONS_COLUMNS;

--UNIQUE : 중복 값을 허용하지 않는 제약조건
CREATE TABLE TABLE_USER_UK(
    USER_NO NUMBER UNIQUE,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(15) NOT NULL,
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30)
);

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TABLE_USER_UK';

INSERT INTO TABLE_USER_UK
    VALUES(1, 'BEOMSUK', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');
INSERT INTO TABLE_USER_UK
    VALUES(3, '홍길동2', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');    

SELECT *
FROM TABLE_USER_UK;
--SYS_C007053
SELECT *
FROM USER_CONS_COLUMNS
WHERE CONSTRAINT_NAME = 'SYS_C007054';

CREATE TABLE TABLE_USER_UK2(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(15) NOT NULL,
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    UNIQUE(USER_NO),
    UNIQUE(USER_ID)
);

SELECT *
FROM USER_CONSTRAINTS;
SELECT *
FROM USER_CONS_COLUMNS;

CREATE TABLE TABLE_USER_UK3(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(15) NOT NULL,
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    UNIQUE(USER_NO, USER_ID)
);

INSERT INTO TABLE_USER_UK3
    VALUES(2, '홍길동', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');
INSERT INTO TABLE_USER_UK3
    VALUES(2, '최범석', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');
INSERT INTO TABLE_USER_UK3
    VALUES(3, '최범석', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');
INSERT INTO TABLE_USER_UK3
    VALUES(3, '최범석', 'TEST', 'TEST', '녀', '01012345678','CHOIBEOMSUK@NAVER.COM');

--제약조건의 이름을 설정하면서 테이블을 만드는 방법
--제약조건의 이름이 필요한 이유 - 오류 발생시 해당 제약조건을 위배되었다고 
--CONSOLE창의 데이터만 보고 판단할수 있도록 정보 제공용으로 이름을 설정 함
CREATE TABLE TABLE_USER_CONS_NAME(
    USER_NO NUMBER CONSTRAINT USER_NO_UK UNIQUE,
    USER_ID VARCHAR2(20) CONSTRAINT USER_ID_UK UNIQUE,
    USER_PWD VARCHAR2(30) CONSTRAINT USER_PWD_NN NOT NULL,
    USER_NAME VARCHAR2(15) NOT NULL,
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30)
);

CREATE TABLE TABLE_USER_CONS_NAME2(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30) CONSTRAINT USER_PWD_NN1 NOT NULL,
    USER_NAME VARCHAR2(15) NOT NULL,
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    CONSTRAINT USER_NO_UK1 UNIQUE (USER_NO),
    CONSTRAINT USER_ID_UK1 UNIQUE (USER_ID)
);



SELECT *
FROM USER_CONSTRAINTS;

INSERT INTO TABLE_USER_CONS_NAME
    VALUES(1, 'BEOMSUK', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');
INSERT INTO TABLE_USER_CONS_NAME
    VALUES(1, '홍길동', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');


--CHECK : 설정 된 값만 입력 가능하도록 하는 제약조건
--값을 설정, 조건식 설정해서 해당 값들만 들어가도록 한다.
CREATE TABLE TABLE_USER_CK(
    USER_NO NUMBER CHECK (USER_NO BETWEEN 1 AND 10000),
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3) CHECK (GENDER IN ('남','녀')),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30)
);

INSERT INTO TABLE_USER_CK
    VALUES(1, 'BEOMSUK', 'BEOMSUK', '최범석', '남', '01012345678','CHOIBEOMSUK@NAVER.COM');
INSERT INTO TABLE_USER_CK
    VALUES(2, 'BEOMSUK', 'BEOMSUK', '최범석', '녀', '01012345678','CHOIBEOMSUK@NAVER.COM');
--INSERT INTO TABLE_USER_CK
--    VALUES(3, 'BEOMSUK', 'BEOMSUK', '최범석', '여', '01012345678','CHOIBEOMSUK@NAVER.COM');
--INSERT INTO TABLE_USER_CK
--    VALUES(3, 'BEOMSUK', 'BEOMSUK', '최범석', 'AA', '01012345678','CHOIBEOMSUK@NAVER.COM');


--테이블을 만들어 보세요.
--1. 테이블 명 : CONSTRAINT_TB1
--2. 컬럼 : 코멘트
--        NAME - VARCHAR2(30)
--        AGE - NUMBER(3) - 15~80 까지만 입력 가능(이름 : TB1_AGE_CK)
--        ID - VARCHAR2(20) - NULL 허용 안함 (이름 : TB1_ID_NULL)
--        PASSWORD - NUMBER(4) - NULL 허용 안함 (이름 : TB1_PWD_NULL)
--        NAME, ID 값을 묶어서 중복 입력 방지
CREATE TABLE CONSTRAINT_TB1(
    NAME VARCHAR2(30),
    AGE NUMBER(3),
    ID VARCHAR2(20) CONSTRAINT TB1_ID_NULL NOT NULL,
    PASSWORD NUMBER(4) CONSTRAINT TB1_PWD_NULL NOT NULL,
    CONSTRAINT TB1_AGE_CK CHECK (AGE BETWEEN 15 AND 80),
    CONSTRAINT TB1_NAME_ID_UK UNIQUE (NAME, ID)
);

COMMENT ON COLUMN CONSTRAINT_TB1.NAME IS '이름';
COMMENT ON COLUMN CONSTRAINT_TB1.AGE IS '나이';
COMMENT ON COLUMN CONSTRAINT_TB1.ID IS '아이디';
COMMENT ON COLUMN CONSTRAINT_TB1.PASSWORD IS '비밀번호';
COMMENT ON TABLE CONSTRAINT_TB1 IS '제약조건 확인';




