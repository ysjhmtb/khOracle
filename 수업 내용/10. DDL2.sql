--PRIMARY KEY : 해당 테이블의 식별자((프라이머리) 키 값)
--  테이블 내 한개의 행을 조회 할때 사용할수 있는 값
--  고유한 값이여야 한다, NULL -> UNIQUE, NOT NULL
CREATE TABLE USER_PRIMARYKEY(
    USER_NO NUMBER CONSTRAINT USER_NO_PK PRIMARY KEY,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30)
);
SELECT *
FROM USER_CONSTRAINTS;

SELECT CC.CONSTRAINT_NAME, C.CONSTRAINT_TYPE, CC.TABLE_NAME, CC.COLUMN_NAME
FROM USER_CONSTRAINTS C
JOIN USER_CONS_COLUMNS CC ON (C.CONSTRAINT_NAME = CC.CONSTRAINT_NAME);

INSERT INTO USER_PRIMARYKEY 
    VALUES(1, 'USERID_1', 'USERPWD_1', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM');
--INSERT INTO USER_PRIMARYKEY 
--    VALUES(NULL, 'USERID_1', 'USERPWD_1', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM');
--INSERT INTO USER_PRIMARYKEY 
--    VALUES(1, 'USERID_2', 'USERPWD_2', '최범석2', '남', '01012345672', 'BEOMSUK2@NAVER.COM');         
INSERT INTO USER_PRIMARYKEY 
    VALUES(2, 'USERID_2', 'USERPWD_2', '최범석2', '남', '01012345672', 'BEOMSUK2@NAVER.COM');        
    
    
CREATE TABLE USER_PRIMARYKEY2(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    CONSTRAINT USER2_NO_PK PRIMARY KEY(USER_NO, USER_ID)
);
INSERT INTO USER_PRIMARYKEY2 
    VALUES(1, 'USERID_1', 'USERPWD_1', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM');
INSERT INTO USER_PRIMARYKEY2 
    VALUES(2, 'USERID_1', 'USERPWD_1', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM');    
INSERT INTO USER_PRIMARYKEY2 
    VALUES(1, 'USERID_2', 'USERPWD_1', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM');
INSERT INTO USER_PRIMARYKEY2 
    VALUES(1, 'USERID_2', 'USERPWD_3', '최범', '남', '0109999999', 'B@NAVER.COM');
    
--회원
--회원번호, 이름, 아이디, 비밀번호, 주민번호, 주소, 전화번호, 회원권한;
--회원번호 <- 키 -> 주민번호 -> 후보키 
--이름, 아이디 -> 복합키, 후보키

--FOREIGN KEY : 외래키 -> 다른테이블에 있는 컬럼을 참조할때 설정하는 제약조건
--EMPLOYEE -> DEPT_CODE -> DEPARTMENT(DEPT_ID) 
--왜래키를 설정 할때는 다른 테이블의 프라이머리 키를 참조한다.(유니크)

--유저 등급을 저장하는 테이블
CREATE TABLE USER_GRADE(
    GRADE_CODE NUMBER PRIMARY KEY,
    GRADE_NAME VARCHAR2(30) NOT NULL
);

INSERT INTO USER_GRADE
    VALUES(10, '일반회원');
INSERT INTO USER_GRADE
    VALUES(20, '우수회원');
INSERT INTO USER_GRADE
    VALUES(30, '특급회원');
INSERT INTO USER_GRADE
    VALUES(40, '슈퍼회원');    
INSERT INTO USER_GRADE
    VALUES(50, '프리미엄회원');    

SELECT *
FROM USER_GRADE;

CREATE TABLE USER_FOREIGNKEY(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    GRADE_CODE NUMBER,
    CONSTRAINT USER_GRADE_FK FOREIGN KEY (GRADE_CODE) 
                REFERENCES USER_GRADE(GRADE_CODE) 
);

SELECT CC.CONSTRAINT_NAME, C.CONSTRAINT_TYPE, CC.TABLE_NAME, CC.COLUMN_NAME
FROM USER_CONSTRAINTS C
JOIN USER_CONS_COLUMNS CC ON (C.CONSTRAINT_NAME = CC.CONSTRAINT_NAME);

INSERT INTO USER_FOREIGNKEY
    VALUES (1, 'USER_ID', 'USER_PWD', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM', 10);
INSERT INTO USER_FOREIGNKEY
    VALUES (2, 'USER_ID2', 'USER_PWD2', '최범', '남', '0102222222', 'BEO2@NAVER.COM', 20);
INSERT INTO USER_FOREIGNKEY
    VALUES (3, 'USER_ID3', 'USER_PWD3', '홍길동', '남', '0103333333', 'BEO3@NAVER.COM', NULL);

DELETE FROM USER_GRADE 
WHERE GRADE_CODE = 10;
DELETE FROM USER_GRADE 
WHERE GRADE_CODE = 50;

CREATE TABLE USER_GRADE2(
    GRADE_CODE NUMBER PRIMARY KEY,
    GRADE_NAME VARCHAR2(30) NOT NULL
);

INSERT INTO USER_GRADE2
    VALUES(10, '일반회원');
INSERT INTO USER_GRADE2
    VALUES(20, '우수회원');
INSERT INTO USER_GRADE2
    VALUES(30, '특급회원');
INSERT INTO USER_GRADE2
    VALUES(40, '슈퍼회원');    
INSERT INTO USER_GRADE2
    VALUES(50, '프리미엄회원');
    
SELECT *
FROM USER_GRADE2;

CREATE TABLE USER_FOREIGNKEY2(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    GRADE_CODE NUMBER,
    CONSTRAINT USER_GRADE2_FK FOREIGN KEY (GRADE_CODE) 
REFERENCES USER_GRADE2(GRADE_CODE) ON DELETE SET NULL
);
INSERT INTO USER_FOREIGNKEY2
    VALUES (1, 'USER_ID', 'USER_PWD', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM', 10);
INSERT INTO USER_FOREIGNKEY2
    VALUES (2, 'USER_ID2', 'USER_PWD2', '최범', '남', '0102222222', 'BEO2@NAVER.COM', 20);
INSERT INTO USER_FOREIGNKEY2
    VALUES (3, 'USER_ID3', 'USER_PWD3', '홍길동', '남', '0103333333', 'BEO3@NAVER.COM', 10);

SELECT *
FROM USER_FOREIGNKEY2;

DELETE FROM USER_GRADE2
WHERE GRADE_CODE = 10;

CREATE TABLE USER_GRADE3(
    GRADE_CODE NUMBER PRIMARY KEY,
    GRADE_NAME VARCHAR2(30) NOT NULL
);

INSERT INTO USER_GRADE3
    VALUES(10, '일반회원');
INSERT INTO USER_GRADE3
    VALUES(20, '우수회원');
INSERT INTO USER_GRADE3
    VALUES(30, '특급회원');
INSERT INTO USER_GRADE3
    VALUES(40, '슈퍼회원');    
INSERT INTO USER_GRADE3
    VALUES(50, '프리미엄회원');

SELECT *
FROM USER_GRADE3;

CREATE TABLE USER_FOREIGNKEY3(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    GRADE_CODE NUMBER,
    CONSTRAINT USER_GRADE3_FK FOREIGN KEY (GRADE_CODE) 
REFERENCES USER_GRADE3(GRADE_CODE) ON DELETE CASCADE
);
INSERT INTO USER_FOREIGNKEY3
    VALUES (1, 'USER_ID', 'USER_PWD', '최범석', '남', '01012345678', 'BEOMSUK@NAVER.COM', 10);
INSERT INTO USER_FOREIGNKEY3
    VALUES (2, 'USER_ID2', 'USER_PWD2', '최범', '남', '0102222222', 'BEO2@NAVER.COM', 20);
INSERT INTO USER_FOREIGNKEY3
    VALUES (3, 'USER_ID3', 'USER_PWD3', '홍길동', '남', '0103333333', 'BEO3@NAVER.COM', 10);

SELECT *
FROM USER_FOREIGNKEY3;

SELECT *
FROM USER_GRADE3;
DELETE FROM USER_GRADE3
WHERE GRADE_CODE = 10;

ROLLBACK;
COMMIT; 
---> 트랜젝션 처리 (DML, DCL)

--테이블을 만들때 -> 서브쿼리 -> 테이블 복사
CREATE TABLE EMPLOYEE_COPY 
    AS (SELECT * FROM EMPLOYEE);
    
SELECT *
FROM EMPLOYEE_COPY;

--EMPLOYEE_COPY_70S -> 70년대 생들만 조회를 하여 테이블을 생성 함
--사번, 이름, 주민등록번호, 부서, 급여
CREATE TABLE EMPLOYEE_COPY_70S AS( 
SELECT EMP_ID, EMP_NAME, EMP_NO, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE EMP_NO LIKE '7%');
SELECT *
FROM EMPLOYEE_COPY_70S;

--EMPLOYEE_HIRE_00 
--     -> 2000년 이후 입사자 들 중 매니저를 제외 한 직원들 조회
--사번, 사원명, 부서명, 직급명
CREATE TABLE EMPLOYEE_HIRE_00 AS(
SELECT E.EMP_ID, E.EMP_NAME, D.DEPT_TITLE, J.JOB_NAME
FROM EMPLOYEE E
LEFT JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
WHERE 2000 <= EXTRACT (YEAR FROM E.HIRE_DATE)
    AND E.EMP_ID NOT IN (SELECT NVL(MANAGER_ID,1000)
                                            FROM EMPLOYEE
                                            GROUP BY MANAGER_ID));
SELECT *
FROM EMPLOYEE_HIRE_00;

SELECT *
FROM EMPLOYEE_COPY;

SELECT *
FROM USER_CONSTRAINTS C
JOIN USER_CONS_COLUMNS CC ON (C.CONSTRAINT_NAME = CC.CONSTRAINT_NAME);

--제약조건을 테이블에 추가하는 방법
--ALTER TABLE 테이블명 ADD 제약조건명(컬럼명) -- PRIMARY KEY, UNIQUE
--ALTER TABLE 테이블명 ADD FOREIGN KEY(컬럼명) REFERENCES 참조테이블(컬럼) [DELETE RULE]
--ALTER TABLE 테이블명 ADD CHECK(컬럼명 - 조건식)
--ALTER TABLE 테이블명 MODIFY 컬럼명 NOT NULL

ALTER TABLE EMPLOYEE_COPY ADD PRIMARY KEY(EMP_ID);
--EMPLOYEE_COPY 테이블에 DEPT_CODE 컬럼 -> DEPARTMENT(DEPT_ID) FK
ALTER TABLE EMPLOYEE_COPY ADD FOREIGN KEY(DEPT_CODE) REFERENCES DEPARTMENT(DEPT_ID);
--급여는 0원이상으로 입력 되어야 한다. -> EMPLOYEE_COPY
ALTER TABLE EMPLOYEE_COPY ADD CHECK(SALARY >= 0);
--고용일 같은 경우 NULL 입력을 막는다. -> EMPLOYEE_COPY
ALTER TABLE EMPLOYEE_COPY MODIFY HIRE_DATE NOT NULL;

SELECT *
FROM USER_CONSTRAINTS C
JOIN USER_CONS_COLUMNS CC ON (C.CONSTRAINT_NAME = CC.CONSTRAINT_NAME);


-- EMPLOYEE테이블의 DEPT_CODE에 외래키 제약조건 추가
-- 참조 테이블은 DEPARTMENT, 참조 컬럼은 DEPARTMENT의 기본키
ALTER TABLE EMPLOYEE ADD FOREIGN KEY(DEPT_CODE) REFERENCES DEPARTMENT(DEPT_ID);

-- DEPARTMENT테이블의 LOCATION_ID에 외래키 제약조건 추가
-- 참조 테이블은 LOCATION, 참조 컬럼은 LOCATION의 기본키

ALTER TABLE DEPARTMENT ADD FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCAL_CODE);

-- LOCATION테이블의 NATIONAL_CODE컬럼에 외래키 제약조건 추가
-- 참조 테이블은 NATIONAL 테이블, 참조컬럼은 NATIONAL테이블의 기본키

ALTER TABLE LOCATION ADD FOREIGN KEY(NATIONAL_CODE) REFERENCES NATIONAL;

-- EMPLOYEE테이블의 JOB_CODE에 외래키 제약조건 추가
-- 참조 테이블은 JOB테이블, 참조 컬럼은 JOB테이블의 기본키

ALTER  TABLE EMPLOYEE ADD  FOREIGN KEY(JOB_CODE)  REFERENCES JOB(JOB_CODE);


-- EMPLOYEE테이블의 SAL_LEVEL에 외래키 제약조건 추가
-- 참조 테이블은 SAL_GRADE테이블, 참조 컬럼은 SAL_GRADE테이블의 기본키

ALTER  TABLE EMPLOYEE ADD  FOREIGN KEY(SAL_LEVEL)  REFERENCES SAL_GRADE(SAL_LEVEL);


-- EMPLOYEE 테이블의 ENT_YN 컬럼에 CHECK제약조건 추가 ('Y' 혹은 'N')
-- 단, 대소문자 구분함

ALTER TABLE EMPLOYEE ADD CHECK(ENT_YN IN('Y','N')); 

-- EMPLOYEE 테이블의 SALARY 컬럼에 CHECK제약조건 추가 (양수)

ALTER TABLE EMPLOYEE ADD CHECK(SALARY>0);

-- EMPLOYEE 테이블의 EMP_NO 컬럼에 UNIQUE 제약조건 추가

ALTER TABLE EMPLOYEE ADD UNIQUE (EMP_NO);

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'EMPLOYEE';

SELECT *
FROM USER_CONS_COLUMNS;







